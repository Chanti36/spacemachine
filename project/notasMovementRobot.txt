extends CharacterBody3D

const SPEED = 5.0
const JUMP_VELOCITY = 4.5

@onready var playerCtrl: Node3D = $"../CONTROL/PlayerControler"
@onready var world: MeshInstance3D = $"../WORLD/planetMesh"

var vel = Vector3()
const MAX_SLOPE_ANGLE = 40
var speed = 50

func _process(delta: float) -> void:
	look_at(world.position)


func _physics_process(delta: float) -> void:
	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	#var input_dir := Input.get_vector("ui_left", "ui_right", "ui_up", "ui_down")
	#var direction := (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
	#if direction:
		#velocity.x = direction.x * SPEED
		#velocity.z = direction.z * SPEED
	#else:
		#velocity.x = move_toward(velocity.x, 0, SPEED)
		#velocity.z = move_toward(velocity.z, 0, SPEED)
	#move_and_slide()
	
	#
	#vel = Vector3()
	#if Input.is_action_pressed("ui_up"):
		#vel -= transform.basis.y
	#if Input.is_action_pressed("ui_down"):
		#vel += transform.basis.y
	#if Input.is_action_pressed("ui_left"):
		#vel += transform.basis.x
	#if Input.is_action_pressed("ui_right"):
		#vel -= transform.basis.x 
	#
	vel*= speed
	velocity = vel
	up_direction = get_gravity_dir_vector()
	move_and_slide()
	###0.05, 4, deg_to_rad(MAX_SLOPE_ANGLE),
	#
	#print ("DIR = ", playerCtrl.v3_dir)
	#print ("ROTATION= ", rotation)
	#
	
	velocity = playerCtrl.v3_dir * playerCtrl.f_force *10
	move_and_slide()
	
	
	#print(get_gravity_dir_vector())

func dist3(from : Vector3, to : Vector3):
	var v = from - to
	var d = sqrt(
	v.x *  v.x
	+ v.y * v.y
	+ v.z * v.z)
	return d

func get_gravity_dir_vector():
	return (world.transform.origin - transform.origin).normalized()


func orientChar():
	var gravity := (world.position - position).normalized()
	var leftAxis := gravity.cross(playerCtrl.v3_dir)
	var rotation_basis := Basis(leftAxis, -gravity, playerCtrl.v3_dir).orthonormalized()
	transform.basis = transform.basis.get_rotation_quaternion().slerp(rotation_basis, 1)


________________________________________________________________
_________________________________________________________________
____________________________________________________________________

const SPEED = 0.2
var gravity =1
var gravityDirection;
var distance = 0.6

func _physics_process(delta):
	gravityDirection = planet.position - position
	rotation = (Quaternion(-transform.basis.y, gravityDirection) * transform.basis.get_rotation_quaternion()).normalized().get_euler()
	
	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var input_dir = Input.get_vector("ui_left", "ui_right", "ui_up", "ui_down")
	
	var direction = (global_basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
	velocity = direction * SPEED
	print(velocity)
	# Add the gravity.
	velocity += gravityDirection * gravity * delta
	#print(gravityDirection)
	#print(dist3(planet.position, position))
	move_and_slide()
	#setDistance()
